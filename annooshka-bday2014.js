// Generated by CoffeeScript 1.6.3
(function() {
  var Background, Ball, Block, Scene, blocks_map, generate_ball, init, resize_blocks,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  blocks_map = '.................................................\n.................................................\n.................................................\n.................#####.....#####.................\n.......ooooo....#.....##.##.....#..ooooo..ooooo..\n......o....o....#.......#.......#....o...o....o..\n.......ooooo.....##...........##.....o....ooooo..\n.........o.o.......##.......##.......o......o.o..\n.......oo..o.........##...##.........o....oo..o..\n.......................#.#.......................\n........................#........................\n.................................................\n.................................................\n.................................................';

  Background = (function() {
    function Background(color) {
      this.color = color;
    }

    Background.prototype.redraw = function(ctx) {
      ctx.fillStyle = this.color;
      return ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
    };

    return Background;

  })();

  Block = (function() {
    function Block(x, y, radius, type) {
      this.x = x;
      this.y = y;
      this.radius = radius;
      this.type = type;
      this.block = true;
    }

    Block.prototype.shot = function() {
      if (this.type !== 1) {
        return this.type = Math.max(-1, this.type - 1);
      }
    };

    Block.prototype.visible = function() {
      return this.type !== -1;
    };

    Block.prototype.redraw = function(ctx) {
      switch (this.type) {
        case 1:
          ctx.fillStyle = "#ff2020";
          break;
        case 0:
        case 2:
          ctx.fillStyle = "#83ff53";
          break;
        case -1:
          return;
      }
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI, false);
      ctx.closePath();
      return ctx.fill();
    };

    Block.build_blocks_from_map = function(map, sx, sy, radius) {
      var blocks, blocks_line, ch, ix, iy, line, n, _i, _j, _len, _len1;
      blocks = [];
      iy = 0.5;
      for (_i = 0, _len = map.length; _i < _len; _i++) {
        line = map[_i];
        ix = 0.5;
        blocks_line = [];
        for (_j = 0, _len1 = line.length; _j < _len1; _j++) {
          ch = line[_j];
          switch (ch) {
            case ".":
              n = 0;
              break;
            case "#":
              n = 1;
              break;
            case "o":
              n = 2;
          }
          blocks.push(new Block(sx + ix * radius * 2, sy + iy * radius * 2, radius, n));
          ix += 1;
        }
        iy += 1;
      }
      return blocks;
    };

    return Block;

  })();

  Ball = (function() {
    function Ball(x, y, dx, dy, radius) {
      this.x = x;
      this.y = y;
      this.dx = dx;
      this.dy = dy;
      this.radius = radius;
      this.ball = true;
      this.collided = [];
    }

    Ball.prototype.distance = function(obj) {
      return Math.sqrt(Math.pow(this.x - obj.x, 2) + Math.pow(this.y - obj.y, 2));
    };

    Ball.prototype.check_collision = function(obj) {
      return this.distance(obj) <= this.radius + obj.radius;
    };

    Ball.projection = function(x1, y1, x2, y2, x3, y3, direction) {
      var cos, l, nx, ny, sin;
      l = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
      sin = (y2 - y1) / l;
      cos = (x2 - x1) / l;
      nx = x3 * cos + y3 * sin;
      ny = -x3 * sin + y3 * cos;
      return [nx, ny];
    };

    Ball.collide = function(o1, o2) {
      var beat1, beat2, static1, static2, _ref, _ref1, _ref2, _ref3;
      _ref = Ball.projection(o1.x, o1.y, o2.x, o2.y, o1.dx, o1.dy), beat1 = _ref[0], static1 = _ref[1];
      _ref1 = Ball.projection(o1.x, o1.y, o2.x, o2.y, o2.dx, o2.dy), beat2 = _ref1[0], static2 = _ref1[1];
      _ref2 = Ball.projection(o1.x, o2.y, o2.x, o1.y, beat2, static1), o1.dx = _ref2[0], o1.dy = _ref2[1];
      return _ref3 = Ball.projection(o1.x, o2.y, o2.x, o1.y, beat1, static2), o2.dx = _ref3[0], o2.dy = _ref3[1], _ref3;
    };

    Ball.symmetric_collide = function(o, x, y) {
      var beat, stat, _ref, _ref1;
      _ref = Ball.projection(o.x, o.y, x, y, o.dx, o.dy), beat = _ref[0], stat = _ref[1];
      return _ref1 = Ball.projection(o.x, y, x, o.y, -beat, stat), o.dx = _ref1[0], o.dy = _ref1[1], _ref1;
    };

    Ball.prototype.calc_collisions = function(objs, w, h) {
      var ncollided, o, _i, _len, _ref,
        _this = this;
      ncollided = [];
      _ref = objs.filter(function(o) {
        return _this !== o && _this.check_collision(o);
      });
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        o = _ref[_i];
        if (__indexOf.call(this.collided, o) < 0) {
          if (o.ball) {
            if (__indexOf.call(o.collided, this) < 0) {
              Ball.collide(this, o);
              this.collided.push(o);
            }
          } else if (o.block && o.visible()) {
            Ball.symmetric_collide(this, o.x, o.y);
            o.shot();
            if (objs.length < 800) {
              objs.push(generate_ball(this.radius, w, h));
            }
          }
        }
        ncollided.push(o);
      }
      this.collided = ncollided;
      if (this.x < this.radius && this.dx < 0) {
        Ball.symmetric_collide(this, -10, this.y);
      }
      if (this.x > w - this.radius && this.dx > 0) {
        Ball.symmetric_collide(this, w + 10, this.y);
      }
      if (this.y < this.radius && this.dy < 0) {
        Ball.symmetric_collide(this, this.x, -10);
      }
      if (this.y > h - this.radius && this.dy > 0) {
        return Ball.symmetric_collide(this, this.x, h + 10);
      }
    };

    Ball.prototype.step = function(ctx) {
      this.x += this.dx;
      return this.y += this.dy;
    };

    Ball.prototype.redraw = function(ctx) {
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI, false);
      ctx.lineTo(this.x, this.y);
      ctx.closePath();
      ctx.fillStyle = "#63bfc7";
      return ctx.fill();
    };

    return Ball;

  })();

  generate_ball = function(radius, w, h) {
    return new Ball(radius + (w - 2 * radius) * Math.random(), h / 4 * (3 + Math.random()), h * 0.01 * (Math.random() * 2 - 1), h * 0.01 * (Math.random() * 2 - 1), radius);
  };

  Scene = (function() {
    function Scene(ctx, objects, w, h, interval) {
      this.ctx = ctx;
      this.objects = objects;
      this.w = w;
      this.h = h;
      this.interval = interval != null ? interval : 100;
      this.stop = __bind(this.stop, this);
      this.iteration = __bind(this.iteration, this);
      this.timer = setInterval(this.iteration, this.interval);
    }

    Scene.prototype.iteration = function() {
      var _this = this;
      this.objects.forEach(function(o) {
        return typeof o.calc_collisions === "function" ? o.calc_collisions(_this.objects, _this.w, _this.h) : void 0;
      });
      this.objects.forEach(function(o) {
        return typeof o.step === "function" ? o.step(_this.ctx) : void 0;
      });
      return this.objects.forEach(function(o) {
        return o.redraw(_this.ctx);
      });
    };

    Scene.prototype.stop = function() {
      return clearInterval(this.timer);
    };

    return Scene;

  })();

  resize_blocks = function(blocks_map, w, h) {
    var blk_diameter_h, blk_diameter_w, dcount, extra, i, lines, ncount, _, _i, _j, _ref, _ref1;
    lines = blocks_map.split("\n");
    blk_diameter_w = w / lines[0].length;
    blk_diameter_h = h / lines.length / 4 * 3;
    if (blk_diameter_w > blk_diameter_h) {
      ncount = w / blk_diameter_h;
      dcount = ncount - lines[0].length;
      extra = "";
      for (_ = _i = 0, _ref = Math.floor(dcount / 2); 0 <= _ref ? _i < _ref : _i > _ref; _ = 0 <= _ref ? ++_i : --_i) {
        extra += ".";
      }
      for (i = _j = 0, _ref1 = lines.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        lines[i] = extra + lines[i] + extra;
      }
      return [lines, blk_diameter_h / 2];
    } else {
      return [lines, blk_diameter_w / 2];
    }
  };

  init = function() {
    var blocks, ctx, g, h, objects, radius, w, _, _i, _ref,
      _this = this;
    $("body").css("background", "#293134");
    ctx = $("#area")[0].getContext("2d");
    w = $(window).width() - 20;
    h = $(window).height() - 20;
    ctx.canvas.width = w;
    ctx.canvas.height = h;
    _ref = resize_blocks(blocks_map, w, h), blocks = _ref[0], radius = _ref[1];
    objects = [].concat(new Background("#293134"), Block.build_blocks_from_map(blocks, 0, 0, radius));
    for (_ = _i = 0; _i < 1; _ = ++_i) {
      objects.push(generate_ball(radius, w, h));
    }
    g = new Scene(ctx, objects, w, h);
    return $(window).resize(function() {
      g.stop();
      return init();
    });
  };

  $(init);

}).call(this);
