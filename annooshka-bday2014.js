// Generated by CoffeeScript 1.6.3
(function() {
  var Background, Ball, Block, Platform, Scene, blocks_map, init, resize_blocks,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  blocks_map = '.................................................\n.................#####.....#####.................\n................#.....##.##.....#................\n................#.......#.......#................\n.................##...........##.................\n...................##.......##...................\n.....................##...##.....................\n.......................#.#.......................\n........................#........................\n.................................................';

  Background = (function() {
    function Background(color) {
      this.color = color;
    }

    Background.prototype.redraw = function(ctx) {
      ctx.fillStyle = this.color;
      return ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
    };

    return Background;

  })();

  Platform = (function() {
    function Platform(x, y, width, radius, sa, ea, delta) {
      this.x = x;
      this.y = y;
      this.width = width;
      this.radius = radius;
      this.sa = sa;
      this.ea = ea;
      this.delta = delta;
      this.step_right = __bind(this.step_right, this);
      this.step_left = __bind(this.step_left, this);
      this.keyup = __bind(this.keyup, this);
      this.keydown = __bind(this.keydown, this);
      this.untouch = __bind(this.untouch, this);
      this.touch = __bind(this.touch, this);
      $(window).on("keydown", this.keydown);
      $(window).on("keyup", this.keyup);
      $("#area").on("mousedown", this.touch);
      $("#area").on("mouseup", this.untouch);
    }

    Platform.prototype.touch = function(e) {
      if (e.clientX > e.currentTarget.clientWidth / 2) {
        this.action = this.step_right;
      } else {
        this.action = this.step_left;
      }
      return this.down = true;
    };

    Platform.prototype.untouch = function(e) {
      return this.down = false;
    };

    Platform.prototype.keydown = function(e) {
      switch (e.which) {
        case 39:
        case "d":
          this.action = this.step_right;
          this.down = true;
          return e.preventDefault();
        case 37:
        case "a":
          this.action = this.step_left;
          this.down = true;
          return e.preventDefault();
      }
    };

    Platform.prototype.keyup = function(e) {
      return this.down = false;
    };

    Platform.prototype.make_action = function(ctx) {
      if (typeof this.action === "function") {
        this.action(ctx);
      }
      if (!this.down) {
        return this.action = null;
      }
    };

    Platform.prototype.step_left = function(ctx) {
      return this.x = Math.max(0, this.x - this.delta);
    };

    Platform.prototype.step_right = function(ctx) {
      return this.x = Math.min(ctx.canvas.width - this.width, this.x + this.delta);
    };

    Platform.prototype.redraw = function(ctx) {
      ctx.beginPath();
      ctx.moveTo(this.x, this.y);
      ctx.arc(this.x, this.y, this.radius, this.sa, this.ea, false);
      ctx.closePath();
      ctx.fillStyle = "#fff";
      return ctx.fill();
    };

    return Platform;

  })();

  Block = (function() {
    function Block(x, y, radius, type) {
      this.x = x;
      this.y = y;
      this.radius = radius;
      this.type = type;
    }

    Block.prototype.shot = function() {
      return this.type = Math.max(-1, this.type - 1);
    };

    Block.prototype.redraw = function(ctx) {
      switch (this.type) {
        case 1:
          ctx.fillStyle = "#f00";
          break;
        case 0:
          ctx.fillStyle = "#0f0";
          break;
        case -1:
          return;
      }
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI, false);
      ctx.closePath();
      return ctx.fill();
    };

    Block.build_blocks_from_map = function(map, sx, sy, radius) {
      var blocks, blocks_line, ch, ix, iy, line, n, _i, _j, _len, _len1;
      blocks = [];
      iy = 0.5;
      for (_i = 0, _len = map.length; _i < _len; _i++) {
        line = map[_i];
        ix = 0.5;
        blocks_line = [];
        for (_j = 0, _len1 = line.length; _j < _len1; _j++) {
          ch = line[_j];
          switch (ch) {
            case ".":
              n = 0;
              break;
            case "#":
              n = 1;
          }
          blocks.push(new Block(sx + ix * radius * 2, sy + iy * radius * 2, radius, n));
          ix += 1;
        }
        iy += 1;
      }
      return blocks;
    };

    return Block;

  })();

  Ball = (function() {
    function Ball(x, y, dx, dy, radius) {
      this.x = x;
      this.y = y;
      this.dx = dx;
      this.dy = dy;
      this.radius = radius;
    }

    Ball.prototype.step = function(ctx) {
      this.x += this.dx;
      return this.y += this.dy;
    };

    Ball.prototype.redraw = function(ctx) {
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI, false);
      ctx.lineTo(this.x, this.y);
      ctx.closePath();
      ctx.fillStyle = "#00f";
      return ctx.fill();
    };

    return Ball;

  })();

  Scene = (function() {
    function Scene(ctx, objects, w, h, interval) {
      this.ctx = ctx;
      this.objects = objects;
      this.w = w;
      this.h = h;
      this.interval = interval != null ? interval : 30;
      this.stop = __bind(this.stop, this);
      this.iteration = __bind(this.iteration, this);
      this.timer = setInterval(this.iteration, this.interval);
    }

    Scene.prototype.iteration = function() {
      var _this = this;
      this.objects.forEach(function(e) {
        return typeof e.step === "function" ? e.step(_this.ctx) : void 0;
      });
      return this.objects.forEach(function(e) {
        return e.redraw(_this.ctx);
      });
    };

    Scene.prototype.stop = function() {
      return clearInterval(this.timer);
    };

    return Scene;

  })();

  resize_blocks = function(blocks_map, w, h) {
    var blk_diameter_h, blk_diameter_w, dcount, extra, i, lines, ncount, _, _i, _j, _ref, _ref1;
    lines = blocks_map.split("\n");
    blk_diameter_w = w / lines[0].length;
    blk_diameter_h = h / lines.length / 2;
    if (blk_diameter_w > blk_diameter_h) {
      ncount = w / blk_diameter_h;
      dcount = ncount - lines[0].length;
      extra = "";
      for (_ = _i = 0, _ref = Math.floor(dcount / 2); 0 <= _ref ? _i < _ref : _i > _ref; _ = 0 <= _ref ? ++_i : --_i) {
        extra += ".";
      }
      for (i = _j = 0, _ref1 = lines.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        lines[i] = extra + lines[i] + extra;
      }
      return [lines, blk_diameter_h / 2];
    } else {
      return [lines, blk_diameter_w / 2];
    }
  };

  init = function() {
    var blocks, ctx, g, h, objects, radius, w, _ref,
      _this = this;
    $("body").css("background", "#293134");
    ctx = $("#area")[0].getContext("2d");
    w = $(window).width() - 20;
    h = $(window).height() - 20;
    ctx.canvas.width = w;
    ctx.canvas.height = h;
    _ref = resize_blocks(blocks_map, w, h), blocks = _ref[0], radius = _ref[1];
    objects = [].concat(new Background("#293134"), Block.build_blocks_from_map(blocks, 0, 0, radius), new Ball(w / 2, h * 0.8, 1, -1, radius));
    g = new Scene(ctx, objects, w, h);
    return $(window).resize(function() {
      g.stop();
      return init();
    });
  };

  $(init);

}).call(this);
