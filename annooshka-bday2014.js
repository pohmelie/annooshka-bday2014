// Generated by CoffeeScript 1.6.3
(function() {
  var Background, Block, Platform;

  Background = (function() {
    function Background(ctx, color) {
      this.ctx = ctx;
      this.color = color;
    }

    Background.prototype.redraw = function() {
      this.ctx.fillStyle = this.color;
      return this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);
    };

    return Background;

  })();

  Platform = (function() {
    function Platform(ctx, x, y, width, height, delta) {
      this.ctx = ctx;
      this.x = x;
      this.y = y;
      this.width = width;
      this.height = height;
      this.delta = delta;
    }

    Platform.prototype.step_left = function() {
      return this.x = Math.max(0, this.x - this.delta);
    };

    Platform.prototype.step_right = function() {
      return this.x = Math.min(this.ctx.canvas.width - this.width, this.delta);
    };

    Platform.prototype.redraw = function() {
      console.log(this, this.ctx);
      this.ctx.fillStyle = "#fff";
      return this.ctx.fillRect(this.x, this.y, this.width, this.height);
    };

    return Platform;

  })();

  Block = (function() {
    function Block(ctx, x, y, width, height, type) {
      this.ctx = ctx;
      this.x = x;
      this.y = y;
      this.width = width;
      this.height = height;
      this.type = type;
    }

    Block.prototype.shot = function() {
      return this.type = Math.max(-1, this.type - 1);
    };

    Block.prototype.redraw = function() {
      switch (this.type) {
        case 1:
          this.ctx.fillStyle = "#f00";
          break;
        case 0:
          this.ctx.fillStyle = "#0f0";
          break;
        case -1:
          return;
      }
      return this.ctx.fillRect(this.x, this.y, this.width, this.height);
    };

    Block.build_blocks_from_map = function(map, ctx, sx, sy, width, height) {
      var blocks, blocks_line, ch, ix, iy, line, n, _i, _j, _len, _len1, _ref, _ref1;
      blocks = [];
      iy = 0;
      _ref = map.split("\n");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        ix = 0;
        blocks_line = [];
        _ref1 = line.trim();
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          ch = _ref1[_j];
          switch (ch) {
            case ".":
              n = 0;
              break;
            case "#":
              n = 1;
          }
          blocks.push(new Block(ctx, sx + ix * width, sy + iy * height, width, height, n));
          ix += 1;
        }
        iy += 1;
      }
      return blocks;
    };

    return Block;

  })();

  $(function() {
    var b, blk_width, blks, blocks_map, ctx, h, p, w;
    $("body").css("background", "#293134");
    ctx = $("#area")[0].getContext("2d");
    w = $(window).width() - 20;
    h = $(window).height() - 20;
    ctx.canvas.width = w;
    ctx.canvas.height = h;
    blocks_map = '..................\n.......##.##......\n......#..#..#.....\n.......#...#......\n........#.#.......\n.........#........\n..................';
    b = new Background(ctx, "#293134");
    blk_width = w / blocks_map.split("\n")[0].length;
    blks = Block.build_blocks_from_map(blocks_map, ctx, 0, 0, blk_width, h / 12);
    p = new Platform(ctx, w * 0.9 / 2, h * 0.975 - 5, w * 0.1, h * 0.025, 5);
    b.redraw();
    blks.forEach(function(blk) {
      return blk.redraw();
    });
    return p.redraw();
  });

}).call(this);
