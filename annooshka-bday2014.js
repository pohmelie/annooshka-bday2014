// Generated by CoffeeScript 1.6.3
(function() {
  var Background, Ball, Block, Game, Platform, blocks_map, draw_ellipse, draw_ellipse_by_center, resize_blocks,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  blocks_map = '.................................................\n.................#####.....#####.................\n................#.....##.##.....#................\n................#.......#.......#................\n.................##...........##.................\n...................##.......##...................\n.....................##...##.....................\n.......................#.#.......................\n........................#........................\n.................................................';

  draw_ellipse_by_center = function(ctx, cx, cy, w, h) {
    return draw_ellipse(ctx, cx - w / 2.0, cy - h / 2.0, w, h);
  };

  draw_ellipse = function(ctx, x, y, w, h) {
    var kappa, ox, oy, xe, xm, ye, ym;
    kappa = .5522848;
    ox = (w / 2) * kappa;
    oy = (h / 2) * kappa;
    xe = x + w;
    ye = y + h;
    xm = x + w / 2;
    ym = y + h / 2;
    ctx.moveTo(x, ym);
    ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
    ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
    ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
    return ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
  };

  Background = (function() {
    function Background(color) {
      this.color = color;
    }

    Background.prototype.redraw = function(ctx) {
      ctx.fillStyle = this.color;
      return ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
    };

    return Background;

  })();

  Platform = (function() {
    function Platform(x, y, width, height, delta) {
      this.x = x;
      this.y = y;
      this.width = width;
      this.height = height;
      this.delta = delta;
    }

    Platform.prototype.step_left = function() {
      return this.x = Math.max(0, this.x - this.delta);
    };

    Platform.prototype.step_right = function() {
      return this.x = Math.min(ctx.canvas.width - this.width, this.delta);
    };

    Platform.prototype.redraw = function(ctx) {
      ctx.fillStyle = "#fff";
      return ctx.fillRect(this.x, this.y, this.width, this.height);
    };

    return Platform;

  })();

  Block = (function() {
    function Block(x, y, radius, type) {
      this.x = x;
      this.y = y;
      this.radius = radius;
      this.type = type;
    }

    Block.prototype.shot = function() {
      return this.type = Math.max(-1, this.type - 1);
    };

    Block.prototype.redraw = function(ctx) {
      switch (this.type) {
        case 1:
          ctx.fillStyle = "#f00";
          break;
        case 0:
          ctx.fillStyle = "#0f0";
          break;
        case -1:
          return;
      }
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI, false);
      ctx.closePath();
      return ctx.fill();
    };

    Block.build_blocks_from_map = function(map, sx, sy, radius) {
      var blocks, blocks_line, ch, ix, iy, line, n, _i, _j, _len, _len1;
      blocks = [];
      iy = 0.5;
      for (_i = 0, _len = map.length; _i < _len; _i++) {
        line = map[_i];
        ix = 0.5;
        blocks_line = [];
        for (_j = 0, _len1 = line.length; _j < _len1; _j++) {
          ch = line[_j];
          switch (ch) {
            case ".":
              n = 0;
              break;
            case "#":
              n = 1;
          }
          blocks.push(new Block(sx + ix * radius * 2, sy + iy * radius * 2, radius, n));
          ix += 1;
        }
        iy += 1;
      }
      return blocks;
    };

    return Block;

  })();

  Ball = (function() {
    function Ball(x, y, dx, dy, radius) {
      this.x = x;
      this.y = y;
      this.dx = dx;
      this.dy = dy;
      this.radius = radius;
    }

    Ball.prototype.redraw = function(ctx) {
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI, false);
      ctx.closePath();
      ctx.fillStyle = "#00f";
      return ctx.fill();
    };

    return Ball;

  })();

  Game = (function() {
    function Game(ctx, static_objects, platform, ball, w, h, interval) {
      this.ctx = ctx;
      this.static_objects = static_objects;
      this.platform = platform;
      this.ball = ball;
      this.w = w;
      this.h = h;
      this.interval = interval != null ? interval : 30;
      this.iteration = __bind(this.iteration, this);
      setInterval(this.iteration, this.interval);
    }

    Game.prototype.iteration = function() {
      var _this = this;
      this.static_objects.forEach(function(e) {
        return e.redraw(_this.ctx);
      });
      this.ball.redraw(this.ctx);
      this.platform.redraw(this.ctx);
      return this.ball.redraw(this.ctx);
    };

    return Game;

  })();

  resize_blocks = function(blocks_map, w, h) {
    var blk_diameter_h, blk_diameter_w, dcount, extra, i, lines, ncount, _, _i, _j, _ref, _ref1;
    lines = blocks_map.split("\n");
    blk_diameter_w = w / lines[0].length;
    blk_diameter_h = h / lines.length / 2;
    if (blk_diameter_w > blk_diameter_h) {
      ncount = w / blk_diameter_h;
      dcount = ncount - lines[0].length;
      extra = "";
      for (_ = _i = 0, _ref = dcount / 2; 0 <= _ref ? _i < _ref : _i > _ref; _ = 0 <= _ref ? ++_i : --_i) {
        extra += ".";
      }
      for (i = _j = 0, _ref1 = lines.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        lines[i] = extra + lines[i] + extra;
      }
      return [lines, blk_diameter_h / 2];
    } else {
      return [lines, blk_diameter_w / 2];
    }
  };

  $(function() {
    var blocks, ctx, g, h, radius, static_objects, w, _ref;
    $("body").css("background", "#293134");
    ctx = $("#area")[0].getContext("2d");
    w = $(window).width() - 20;
    h = $(window).height() - 20;
    ctx.canvas.width = w;
    ctx.canvas.height = h;
    static_objects = [new Background("#293134")];
    _ref = resize_blocks(blocks_map, w, h), blocks = _ref[0], radius = _ref[1];
    static_objects = static_objects.concat(Block.build_blocks_from_map(blocks, 0, 0, radius));
    return g = new Game(ctx, static_objects, new Platform(w * 0.9 / 2, h * 0.975 - 5, w * 0.1, h * 0.025, 5), new Ball(w / 2, h * 0.8, 1, -1, 10), w, h);
  });

}).call(this);
